plugins {
	id "dev.architectury.loom" version "0.12.0-SNAPSHOT"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

loom {
	// use this if you are using the official mojang mappings
	// and want loom to stop warning you about their license
	silentMojangMappingsLicense()

	// since loom 0.10, you are **required** to use the
	// "forge" block to configure forge-specific features,
	// such as the mixinConfigs array or datagen
	forge {
		// specify the mixin configs used in this mod
		// this will be added to the jar manifest as well!
		mixinConfigs = [
				"mixins.litematica_printer.json"
		]

		// missing access transformers?
		// don't worry, you can still use them!
		// note that your AT *MUST* be located at
		// src/main/resources/META-INF/accesstransformer.cfg
		// to work as there is currently no config option to change this.
		// also, any names used in your access transformer will need to be
		// in SRG mapped ("func_" / "field_" with MCP class names) to work!
		// (both of these things may be subject to change in the future)

		// this will create a data generator configuration
		// that you can use to automatically generate assets and data
		// using architectury loom. Note that this currently *only* works
		// for forge projects made with architectury loom!
		dataGen {
			mod project.mod_id
		}
	}

	// This allows you to modify your launch configurations,
	// for example to add custom arguments. In this case, we want
	// the data generator to check our resources directory for
	// existing files. (see Forge's ExistingFileHelper for more info)
}

repositories {
	// maven { url 'https://maven.terraformersmc.com/releases/' }
	// maven { url 'https://maven.quiltmc.org/repository/release/' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.mappings_version}:v2"
	forge "net.minecraftforge:forge:${project.forge_version}"
	//modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
	implementation "com.google.code.findbugs:jsr305:3.0.2"
	
	modImplementation fileTree(dir: "../malilib-forge-malilib-forge-1.18.x/build/libs", include: "**.jar")
	modImplementation fileTree(dir: "../litematica-forge-litematica-forge-1.18.x/build/libs", include: "**.jar")

	//implementation fileTree(dir: "./libs", include: "litematica-forge-1.18.2-0.11.6.jar")
	//implementation fileTree(dir: "./libs", include: "malilib-forge-1.18.2-0.12.1.jar")

	// Fabric API. This is technically optional, but you probably want it anyway.
	//modImplementation "net.fabricmc.fabric-api:fabric-api:" + project.fabric_version

	//modImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_api_version))
	//include(modImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_api_version)))

	//modCompileOnly "com.terraformersmc:modmenu:${project.mod_menu_version}"
}

group = project.group + "." + project.mod_id
archivesBaseName = project.mod_file_name + '-' + project.minecraft_version_out
version = project.mod_version

if (version.endsWith('-dev')) {
	version += "." + new Date().format('yyyyMMdd.HHmmss')
}

processResources {
	inputs.property "version", project.version

}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.mod_name,
				"Implementation-Version"  : mod_version,
				"Implementation-Vendor"   : project.author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}